{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    open_parens = []\n    groups = []\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            open_parens.append(char)\n            current_group += char\n        elif char == ')':\n            if open_parens:\n                open_parens.pop()\n                current_group += char\n                groups.append(current_group)\n                current_group = ''\n        else:\n            continue\n            \n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part\n\n# Example usage:"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n\n# Test case"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n    # Alternatively, using list comprehension:\n    return [num for pair in zip(numbers, [delimeter] * (len(numbers) - 1)) for num in pair] + [numbers[-1]] if numbers else []\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    max_depths = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(len(stack))\n        elif char == ')':\n            if stack:\n                max_depth = stack.pop()\n                max_depths.append(max_depth + 1)\n\n    return max_depths\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n\n    return (total_sum, total_product)\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = numbers[0]\n    \n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    if not string:\n        return string\n    \n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            return prefix + postfix[::-1]\n    \n    return string + string[::-1][1:] if not is_palindrome(string) else string\n\n# Test cases"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for bit_a, bit_b in zip(a, b):\n        xor_result = str(int(bit_a) ^ int(bit_b))\n        result += xor_result\n    return result\n\n# Example usage:"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Example usage:"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    if n < 0:\n        return ''\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    seen = set()\n    for char in string.lower():\n        if char.isalpha():\n            seen.add(char)\n    return len(seen)\n\n# Test cases to demonstrate functionality"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beat_map = {'o': 4, 'o|': 2, '.|': 1}\n    beats = [beat_map[note] for note in music_string.split()]\n    return beats\n\n\n# Example usage:\n# print(parse_music('o o| .| o| o| .| .| .| o o'))\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count\n\n# Example usage:"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    valid_numbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda num: valid_numbers.index(num))\n    return ' '.join(numbers_list)\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers.\")\n\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (None, None)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair\n\n# Example test cases"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_val, max_val = min(numbers), max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\n    normalized_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return normalized_numbers\n\n\n# Example usage:\n# print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n\n# Unit tests for the function"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for divisor in range(n-1, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors\n\n# Example test cases"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n\n# Test the function with a sample input"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[-2] == 0:\n        return None\n    \n    # Convert coefficients to complex numbers if any are negative\n    xs = [complex(coeff) for coeff in xs]\n    \n    # Find maximum and minimum roots\n    roots = []\n    for sign in [1, -1]:\n        if sign == 1:\n            b, a = abs(xs[-1]), -sum(xs[:-1])\n        else:\n            b, a = -abs(xs[-1]), sum(xs[:-1])\n        \n        # Calculate the discriminant\n        discriminant = b ** 2 - 4 * a.real\n        \n        if discriminant >= 0:\n            root1 = (-b + cmath.sqrt(discriminant)).real / 2\n            root2 = (-b - cmath.sqrt(discriminant)).real / 2\n            roots.extend([root1, root2])\n        else:\n            # If the discriminant is negative, calculate the roots using complex numbers\n            sqrt_discriminant = cmath.sqrt(discriminant)\n            root1 = (-b + sqrt_discriminant) / (2 * a)\n            root2 = (-b - sqrt_discriminant) / (2 * a)\n            roots.extend([root1, root2])\n    \n    # Return the real root that is closest to zero\n    real_roots = [root.real for root in roots if root.imag == 0]\n    return min(real_roots, key=abs)\n\n# Example usage:"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [item if index % 3 != 0 else sorted([item])[0] for index, item in enumerate(l)]\n\n# Test cases"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n\n# Test case"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Example usage:"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_values = sorted(l[1::2])\n    return [x if i % 2 != 0 else y for i, (x, y) in enumerate(zip(l, even_values + [None] * (len(l) - len(even_values))))]\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements back by prepending the last character to each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) / 2\n\n# Explanation (commented out because the instruction requires no explanation):\n# The formula used calculates the number of unique collisions between two cars in opposing directions.\n# Each car from the left can collide with each car from the right.\n# With 'n' cars, there are n choices for the first car from the left,\n# and for each of these, there are n - 1 cars from the right it can collide with.\n# Since each collision involves two cars, we divide by 2 to avoid double counting.\n# This results in n*(n-1)/2 unique collisions possible.\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\n# Example usage:"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n\n# Test cases"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\n# Test the function with provided example"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[-1] + fib[-2] + fib[-3])\n    return fib[n]\n\n# Example usage:"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    return statistics.median(l)\n\n# Example usage:"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    if not text:\n        return True\n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left, right = left + 1, right - 1\n    return True\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    if p == 0:\n        raise ValueError(\"Modulus cannot be zero.\")\n    if n < 0:\n        return modp(n + p, p)\n    if n == 0:\n        return 1\n    return (2 ** n) % p\n\n# Test cases can be run separately to verify the correctness of the function.\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    returns decoded string by shifting every character back by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases as provided in the docstring"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Example usage:"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n# Example usage:"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n# Example usage"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    return sorted(list(common_set))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    prime_factor = 1\n    # Check for even number and divide by 2\n    while n % 2 == 0:\n        n //= 2\n        prime_factor = 2\n\n    # n must be odd at this point so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            prime_factor = i\n\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        prime_factor = n\n\n    return prime_factor\n\n# Example usage"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack\n\n    # Test cases\n    assert not correct_bracketing(\"(\")\n    assert correct_bracketing(\"()\")\n    assert correct_bracketing(\"(()())\")\n    assert not correct_bracketing(\")(()\")"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int, memo={0: 0, 1: 0, 2: 1}):\n    if n not in memo:\n        memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]\n\n# Example usage:"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    if s[-1] == 'y':\n        count += 1\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Example test cases"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    shift %= length\n    \n    if shift == 0:\n        return num_str\n    \n    if shift > length:\n        return num_str[::-1]\n    \n    shifted = num_str[-shift:] + num_str[:-shift]\n    return shifted\n\n# Example tests"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract numbers from the string using regex\n    import re\n    numbers = map(int, re.findall(r'\\d+', s))\n    \n    # Calculate the number of mangoes\n    mangoes = n - sum(numbers)\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even = min(even_nodes)\n    index_of_smallest = arr.index(smallest_even)\n    return [smallest_even, index_of_smallest]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency_dict = {}\n    for num in lst:\n        if num > 0:\n            frequency_dict[num] = frequency_dict.get(num, 0) + 1\n\n    result = -1\n    for num, freq in frequency_dict.items():\n        if freq >= num:\n            result = max(result, num)\n\n    return result\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        \n        if not lst:\n            break\n        \n        max_val = max(lst)\n        sorted_lst.append(max_val)\n        lst.remove(max_val)\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal places\n        return round(area, 2)\n    else:\n        # Return -1 if it's not a valid triangle\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    len_lst1 = sum(len(item) for item in lst1)\n    len_lst2 = sum(len(item) for item in lst2)\n\n    if len_lst1 < len_lst2:\n        return lst2\n    elif len_lst1 == len_lst2:\n        return lst1\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 1:\n        return False\n    for prime in range(2, a):\n        if a % prime == 0:\n            break\n    else:\n        return False\n    factors = []\n    while a > 1:\n        for i in range(2, a+1):\n            if a % i == 0:\n                factors.append(i)\n                a //= i\n                break\n    return len(factors) == 3 and all(is_prime(factor) for factor in factors)\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    power = n\n    while power < x:\n        power *= n\n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return \"db\" + binary_str + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for number in range(10**(n-1), 10**n):\n        if str(number).startswith('1') or str(number).endswith('1'):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(reversed(row)):\n            if value == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda tup: (tup[0], -tup[1]))\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    # Check if the sum of the first and last element is even or odd\n    sum_first_last = array[0] + array[-1]\n    ascending = sum_first_last % 2 != 0\n\n    # Return sorted array based on the sum condition\n    return sorted(array, reverse=not ascending)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord(char.lower()) + (2 * 2)\n            if char.isupper():\n                encrypted += chr((shift - 65) % 26 + 65)\n            else:\n                encrypted += chr((shift - 97) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    return lst[1] if lst[1] != lst[0] else None\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    sentences = re.split('[.?!]', S)\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0].lower() == \"i\":\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x == y + z) or (y == x + z) or (z == x + y):\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = vowel_map[char.lower()] if char.lower() in vowel_map else char.upper()\n                encoded_message += encoded_char\n            else:\n                encoded_char = vowel_map[char.lower()] if char.lower() in vowel_map else char.lower()\n                encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Testing the function"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = 0\n    for number in lst:\n        if is_prime(number) and number > max_prime:\n            max_prime = number\n\n    return sum_of_digits(max_prime)\n\n# Example test cases:"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    first_key_case = None\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n\n        if first_key_case is None:\n            first_key_case = key.isupper()\n        elif (first_key_case is not key.isupper()):\n            return False\n\n    return True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return (unit_a * unit_b) % 10\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    upper_count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):  # Iterate through even indices\n        if s[i] in vowels:\n            if s[i].isupper():\n                upper_count += 1\n    return upper_count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    float_value = float(value)\n    if float_value >= 0:\n        return math.ceil(float_value) if abs(float_value - math.ceil(float_value)) < abs(float_value - math.floor(float_value)) else math.floor(float_value)\n    else:\n        return math.floor(float_value) if abs(float_value - math.floor(float_value)) < abs(float_value - math.ceil(float_value)) else math.ceil(float_value)\n\n# Examples"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = []\n    current = n\n    while current > 0:\n        levels.append(current)\n        current += 2\n    return levels\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    if s:\n        return s.replace(\",\", \" \").split()\n    return []"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        if x < y and y % 2 == 0:\n            return y\n        return x\n    elif y % 2 == 0:\n        return y\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n\n    def digit_to_word(digit):\n        words = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n                 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n        return words.get(digit, \"\")\n\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr, reverse=True)\n    result = [digit_to_word(num) for num in sorted_arr]\n\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_numbers = sum(range(1, i + 1))\n            result.append(sum_numbers)\n    return result\n\n# Example usage:"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n        else:\n            if sum(int(digit) if digit != '-' else -int(digit[1:]) \n                   for digit in str(abs(num))) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    shifted_arr = arr[-1:] + arr[:-1]\n    \n    return shifted_arr == sorted_arr"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_elements = [x for x in lst1 if x % 2 == 0]\n    lst1_diff = len(even_elements)\n    lst2_diff = len([x for x in lst2 if x % 2 != 0])\n\n    if lst1_diff <= lst2_diff:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    letter_count = {}\n    for letter in test.split():\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    \n    max_count = max(letter_count.values())\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    \n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    filtered_s = ''.join([char for char in s if char not in c])\n    is_palindrome = filtered_s == filtered_s[::-1]\n    return (filtered_s, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count} in the str{i}n of the input.\")\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    current_sum = nums[0]\n    min_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_fills = 0\n    for row in grid:\n        fill_count = 0\n        for cell in row:\n            if cell == 1:\n                if fill_count == capacity:\n                    total_fills += 1\n                    fill_count = 0\n                fill_count += 1\n        if fill_count != 0:\n            while fill_count > 0:\n                total_fills += 1\n                fill_count -= capacity\n    return total_fills\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        vowels = \"aeiouAEIOU\"\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n\n    for s in lst:\n        if s == '(':\n            open_count += 1\n        else:\n            close_count += 1\n\n    if open_count == close_count:\n        return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(heapq.nsmallest(k, arr), reverse=True)\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] < 10:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return sorted([x for x in collatz_sequence if x % 2 != 0])\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        # Rule 3\n        if month < 1 or month > 12:\n            return False\n        # Rule 4\n        if len(date.split('/')) != 3 or len(year) != 4:\n            return False\n        \n        # Try to create a date object with the given date string\n        datetime.datetime(year, month, day)\n    except ValueError:\n        # If we reach this point, the date is invalid\n        return False\n    \n    # Check rules for number of days\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True\n\n# Test cases"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    unique_counts = {x: lst.count(x) for x in lst}\n    for value, count in unique_counts.items():\n        if count > 1 and value != max(unique_counts):\n            return False\n    return lst == sorted(lst)\n"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        sign_product *= (-1 if num < 0 else 1)\n\n    return sign_product * sum(abs(num) for num in arr)\n\n# Example usage:"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    path = []\n    for _ in range(k):\n        min_val = float('inf')\n        min_i, min_j = -1, -1\n        for i in range(N):\n            for j in range(N):\n                if grid[i][j] < min_val:\n                    min_val = grid[i][j]\n                    min_i, min_j = i, j\n        path.append(grid[min_i][min_j])\n        grid[min_i][min_j] = float('inf')\n    return path\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[i + 1] if i + 1 < len(tribonacci) else 0)\n    return [1] + tribonacci"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    found_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            found_odd = True\n        n //= 10\n    return product if found_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return bool(stack)\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(int(x + 0.5) ** 2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and (txt.rfind(' ') == -1 or txt.rfind(' ', 0, txt.rfind(' ')) == -1)\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a, b = float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\"))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0 and n >= 8:\n        return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n < 0:\n        return \"Input must be a positive integer\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        product = 1\n        for i in range(n, 0, -1):\n            product *= factorial(i)\n        return product\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = ''\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if i + 1 < len(text) and text[i + 1] == ' ':\n                count = 1\n                while i + 1 < len(text) and text[i + 1] == ' ':\n                    count += 1\n                    if count > 2:\n                        result += '-'\n                        break\n                    i += 1\n            else:\n                result += '_'\n        else:\n            result += text[i]\n        i += 1\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    valid_extensions = ['txt', 'exe', 'dll']\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if len([char for char in parts[0] if char.isdigit()]) > 3:\n        return 'No'\n    if parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for index, value in enumerate(lst):\n        if (index + 1) % 3 == 0:\n            total += value ** 2\n        elif (index + 1) % 4 == 0 and (index + 1) % 3 != 0:\n            total += value ** 3\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    frac_x = fractions.Fraction(x)\n    frac_n = fractions.Fraction(n)\n    simplified_product = frac_x * frac_n\n    return simplified_product.denominator == 1\n\n# Example usage:"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    valid_planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in valid_planets or planet2 not in valid_planets:\n        return ()\n    index1 = valid_planets.index(planet1)\n    index2 = valid_planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(valid_planets[index1 + 1: index2])\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    filtered_list.sort(key=lambda x: (len(x), x))\n    return filtered_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_strength = -float('inf')\n    strongest_extension = extensions[0]\n\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n\n        if strength > strongest_strength or (strength == strongest_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    len_b = len(b)\n    for i in range(len_b):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    if num == 0:\n        return (1, 0)\n    \n    if num > 0:\n        while num != 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num //= 10\n    \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n\n    return result.lower()\n\n# Example usage:"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining -= min(need, remaining)\n    return [total_eaten, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    ops = {\n        '+': operator.add,\n        '-': operator.sub,\n        '*': operator.mul,\n        '//': operator.floordiv,\n        '**': operator.pow\n    }\n\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = ops[op](result, num)\n    return result\n\n# Example usage:"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    if not has_letters:\n        return s[::-1]\n    else:\n        return result\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n\n# Example usage:"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return sorted(set(filter(lambda x: x % 2 == 0, range(a, b + 1))))\n"}
